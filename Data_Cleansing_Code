# Note: some miscellaneous cleansing code, including but not limited to checking for discrepancies in names (DK Metcalf vs. D.K. Metcalf) and tricodes (e.g. JAX vs. JAC) was omitted here
# This is because certain lines of code didn't result in any changes to the data set

gc(reset = TRUE)
Sys.setenv('R_MAX_VSIZE'=64000000000)

library(vctrs)
library(readxl)
library(tidyselect)
library(naniar)
library(tidyr)
library(plyr)
library(statsr)
library(reactable)
library(plotly)
library(ggplot2)
library(survey)
library(rafalib)
library(modelr)
library(na.tools)
library(ggimage)
library(ggrepel)
library(remotes)
library(reshape2)
library(glue)
library(readr)
library(car)
library(caret)
library(rsample)      
library(ggthemes)
library(scales)
library(Metrics)
library(here)
library(gbm)
library(devtools)
library(nflfastR)
library(teamcolors)
library(slider)
library(xgboost)
library(tidymodels)
library(usemodels)
library(textrecipes)
library(vip)
library(pROC)
library(patchwork)
library(tictoc)
library(data.table)
library(nflreadr)
library(nflplotR)
library(nflverse)
library(tidyverse)
library(dplyr)
library(rsvg)

games <- fread("games.csv")
players <- fread("players.csv")
plays <- fread("plays.csv")
tackles <- fread("tackles.csv")
tracking_week_1 <- fread("tracking_week_1.csv")
tracking_week_2 <- fread("tracking_week_2.csv")
tracking_week_3 <- fread("tracking_week_3.csv")
tracking_week_4 <- fread("tracking_week_4.csv")
tracking_week_5 <- fread("tracking_week_5.csv")
tracking_week_6 <- fread("tracking_week_6.csv")
tracking_week_7 <- fread("tracking_week_7.csv")
tracking_week_8 <- fread("tracking_week_8.csv")
tracking_week_9 <- fread("tracking_week_9.csv")

tracking_combined <- rbind(tracking_week_1, tracking_week_2, tracking_week_3,
                           tracking_week_4, tracking_week_5, tracking_week_6,
                           tracking_week_7, tracking_week_8, tracking_week_9)

# Note that o means orientation, and dir means direction, both scaled 0-360
# In both cases, 0 is facing the visitor sideline (i.e. where Y = 53.3)
# Thus, both 0 and 180 are parallel to the LOS when discussing o and dir
# Similarly, X = 120 at back of visitor end zone (X = 0 at back of home EZ)

# And playDirection refers to which way the offense is facing, NOT the actual play direction
# E.G. a rush outside the left tackle doesn't necessarily have playDirection == left

# To clear memory, now get rid of the individual weeks
rm(tracking_week_1, tracking_week_2, tracking_week_3,
      tracking_week_4, tracking_week_5, tracking_week_6,
      tracking_week_7, tracking_week_8, tracking_week_9)

# Code that will eventually help w/ gap classification and pre-snap alignment
# To start, standardize so that the highest "y" is always to offense's left
# I.e., make it so that it doesn't matter which end zone the offense is aiming at
tracking_combined <- tracking_combined %>%
  mutate(y = ifelse(playDirection == "right", y, (53.3 - y)))

# Likewise, adjust "o" and "dir" in same manner, make 0 always be offense's left
# So 90 is always toward the EZ offense is aiming at, 180 is to offense's right, etc.
tracking_combined <- tracking_combined %>%
  mutate(o = ifelse(playDirection == "right", o, 
                    ifelse((playDirection == "left" & o < 180), o + 180, o - 180)))
tracking_combined <- tracking_combined %>%
  mutate(dir = ifelse(playDirection == "right", dir, 
                    ifelse((playDirection == "left" & dir < 180), dir + 180, dir - 180)))

# Same adjustment for "x" - make high "x" always be where offense is aiming at
tracking_combined <- tracking_combined %>%
  mutate(x = ifelse(playDirection == "right", x, (120 - x)))

# Now create line of scrimmage for each play using ball data
line_of_scrimmage <- tracking_combined %>%
  filter(club == "football", frameId == 1) %>%
  select(gameId, playId, x) %>%
  rename(los = x)

tracking_combined <- tracking_combined %>%
  left_join(line_of_scrimmage, by = c("playId", "gameId"))

tracking_combined <- tracking_combined %>%
  mutate(distFromLOS = x - los,
         distFromMOF = y - 26.65)

# Similar idea to create ball instead of line of scrimmage
ball_df <- tracking_combined %>% 
  filter(club == "football") %>% 
  select(gameId, playId, frameId, x, y) %>% 
  rename(ball_x = x,
         ball_y = y)

tracking_combined <- tracking_combined %>% 
  left_join(ball_df, by = c("playId", "gameId", "frameId"))

tracking_combined <- tracking_combined %>% 
  mutate(TotDistFromBall = sqrt((x - ball_x) ^ 2 + (y - ball_y) ^ 2))
rm(ball_df, line_of_scrimmage)

nflverse_pbp <- nflfastR::load_pbp(2022)
nflverse_pbp <- nflverse_pbp %>% filter(week %in% 1:9)

# General data cleansing/checking for errors
sort(table(players$nflId)) # no duplicates
sort(table(players$displayName)) # no duplicates

# Find any instances of one "ballCarrierId" having more than one name
# E.G. Kenneth Walker III and Kenneth Walker
NameDiscrepancies <- plays %>% 
  group_by(ballCarrierId, ballCarrierDisplayName) %>%
  summarize(n = n())
NameRankings <- sort(table(NameDiscrepancies$ballCarrierId), decreasing = TRUE)
NameDiscrepancy_Table <- as.data.frame(NameRankings)
NameDiscrepancy_Table <- NameDiscrepancy_Table %>% filter(Freq > 1) 
# This is empty, therefore there are no name repeats
rm(NameDiscrepancies, NameDiscrepancy_Table)

table(plays$passResult)
# C means complete, R means scramble, S means sack

# Arrange plays so they are sorted chronologically
plays <- plays %>% arrange(gameId, playId)

# The absoluteYardlineNumber is not accurate, just use nflverse's yardline_100
# And yardlineNumber doesn't give full field picture, e.g. -35 and +35 both say 35
# View(plays %>% filter(possessionTeam == yardlineSide & yardlineNumber < 20))
# This shows us all plays when the offensive team is inside its own 20
# Sometimes absoluteYardlineNumber is under 30, sometimes it's more than 100
plays <- plays %>% select(-"absoluteYardlineNumber", -"yardlineNumber")

# Fix one column that is spelled wrong
plays <- plays %>% rename(visitorTeamWinProbabilityAdded = `visitorTeamWinProbilityAdded`)

# View(plays %>% filter(is.na(passProbability))) - these are all penalties
# View(plays %>% filter(is.na(passProbability) & is.na(penaltyYards))) - empty
# View(plays %>% filter(is.na(preSnapHomeTeamWinProbability))) - empty
# View(plays %>% filter(is.na(preSnapVisitorTeamWinProbability))) - empty
# View(plays %>% filter(is.na(homeTeamWinProbabilityAdded))) - empty
# View(plays %>% filter(is.na(visitorTeamWinProbabilityAdded))) - empty
# View(plays %>% filter(is.na(expectedPoints))) - empty

# View(plays %>% filter(is.na(expectedPointsAdded)))
# One play to fix here, a David Montgomery run on 10/09/22
# Since it's only one play, just find the right answer from nflverse
# View(nflverse_pbp %>% filter(old_game_id == 2022100904, qtr == 2) %>% select(1:35, 73, 74))
plays <- plays %>% mutate(expectedPointsAdded =
        ifelse(is.na(expectedPointsAdded), -0.29447450, expectedPointsAdded))             

# Then, next obligation is to properly merge everything
# Must change the class of nflverse_pbp to make it compatible with the rest
class(nflverse_pbp) <- c("data.table", "data.frame")

# Also must coerce old_game_id in nflverse into a numeric variable
nflverse_pbp$old_game_id <- as.numeric(nflverse_pbp$old_game_id)

PlaysAndGames <- merge(x = games, y = plays, by = "gameId") 
PlaysAndGames_NFLVerse <- merge(x = PlaysAndGames, y = nflverse_pbp, 
                    by.x = c("gameId", "playId", "season", "week", "down"), 
                    by.y = c("old_game_id", "play_id",  "season", "week", "down")) 
rm(games, plays, nflverse_pbp, PlaysAndGames)

# Use all.y = TRUE, since we also want players who didn't make tackles
TrackingWithTackles <- merge(x = tackles, y = tracking_combined,
                   by = c("gameId", "playId", "nflId"), all.y = TRUE)

TrackingWithTackles_PlayerNames <- merge(x = TrackingWithTackles, y = players,
                              by = c("nflId", "displayName"))
# View(TrackingWithTackles_PlayerNames %>% filter(is.na(club)))
rm(players, tackles, tracking_combined, TrackingWithTackles)

NFLVerse_Reduced <- PlaysAndGames_NFLVerse %>% 
  select(-c(7, 43:46, 48:49, 51, 55:57, 59, 61:62, 64, 66:68, 70:74, 80:87, 
            91:94, 102, 105, 108:117, 122:129, 132:133, 135:144, 149:160, 
            165:166, 168:177, 183, 186:187, 189:190, 196:200, 202, 204:207, 210:244, 
            249:301, 308:309, 313:315, 317:320, 325:331, 333:362, 364:367, 372:376,
            378:383, 385, 387:398, 400))

rm(PlaysAndGames_NFLVerse)
MergedData <- merge(x = NFLVerse_Reduced, y = TrackingWithTackles_PlayerNames,
                        by = c("gameId", "playId"))
rm(TrackingWithTackles_PlayerNames, NFLVerse_Reduced)

# Arrange it by game ID and play ID
MergedData <- MergedData %>% arrange(gameId, playId)

MergedData <- MergedData %>% mutate(posteam_win = 
                        case_when(
                          (result > 0 & possessionTeam == homeTeamAbbr) | (result < 0 & possessionTeam == visitorTeamAbbr) ~ 1,
                          (result < 0 & possessionTeam == homeTeamAbbr) | ( result > 0 & possessionTeam == visitorTeamAbbr) ~ 0,
                          result == 0 ~ 0.5))

MergedData <- MergedData %>%
  mutate(EndGamePtDiff = ifelse(possessionTeam == homeTeamAbbr, result, (-1 * result)))
# Good way to test effectiveness:
# View(MergedData %>% filter(posteam_win == 1 & EndGamePtDiff < 0))

# Add a WP success column
MergedData <- MergedData %>% 
  mutate(WPSuccess = ifelse(wpa > 0, 1, 0))
# Check for NAs: View(MergedData %>% filter(is.na(WPSuccess)))

# Find other ways to filter down data, e.g. excluding garbage time
MergedData <- MergedData %>%
  filter(wp >= 0.05 & wp <= 0.95)
