# Recall that "MergedData" was originally created in the "Data Cleansing Code" document

# Make sure we have both offensive and defensive players
table(MergedData$position)

# Make broader "PosGroup" label from there
MergedData <- MergedData %>% mutate(PosGroup = ifelse(position %in% c("C", "G", "T"), "OL",
      ifelse(position %in% c("CB", "DB", "FS", "SS"), "DB",
          ifelse(position %in% c("DE", "DT", "NT"), "DL",
             ifelse(position %in% c("FB", "RB"), "RB",
                ifelse(position %in% c("ILB", "MLB", "OLB"), "LB",
                       ifelse(position == "QB", "QB",
                              ifelse(position == "TE", "TE", "WR"))))))))
table(MergedData$PosGroup)

MergedData <- MergedData %>%
  mutate(PlayerSideOfBall = ifelse(((club == homeTeamAbbr) &
                                (possessionTeam == homeTeamAbbr)) |
    ((club == visitorTeamAbbr) &
       (possessionTeam == visitorTeamAbbr)),
  "offense",
  "defense"))

# Reminder from data cleansing: highest Y value is to offense's left
# Highest X value is end zone offense is aiming at
# So the offensive players lined up on LOS will have highest X

# Run the following code for when we want designed runs separately
# This is because we don't have "start of snap" data for the dropbacks
DesignedRuns_Merged <- MergedData %>% filter(pass == 0)

# Add "x" pre-snap rank for each side of ball (e.g. who is closest to opposing end zone)
DesignedRuns_AtSnap <- DesignedRuns_Merged %>%
  group_by(gameId, playId, PlayerSideOfBall) %>%
  filter(event == "ball_snap") %>% 
  mutate(X_PreSnap_Rank = rank(-x, ties.method = "first")) %>%
  ungroup() %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, X_PreSnap_Rank, 
         PreSnap_x = x, PreSnap_y = y)
# table(FirstFrameOfPlay_DesignedRuns$X_PreSnap_Rank); rank is never higher than 11

# Note that the highest "x" rank pre-snap is NOT always the center
# View(DesignedRuns_AtSnap %>% filter(X_PreSnap_Rank == 1, PlayerSideOfBall == "offense"))

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  merge(DesignedRuns_AtSnap, by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% select(1:4, 6:181, "PlayerSideOfBall")
rm(DesignedRuns_AtSnap)

# Now rank the "y" column for OL specifically
# Both in terms of highest y (e.g. farthest left) & smallest y dist from ball (who is snapping)
# This helps us adjust for two players being listed as C (e.g. BUF Mitch Morse, Ryan Bates)
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(OL_Label =
                          ifelse(PlayerSideOfBall == "offense" & PosGroup %in% "OL", "OL",
                               ifelse(PlayerSideOfBall == "offense" & !PosGroup %in% "OL", "Offense_Skill", "Defense")))
table(DesignedRuns_Merged$OL_Label)

DesignedRuns_By_OL_Label <- DesignedRuns_Merged %>%
  group_by(gameId, playId, OL_Label) %>%
  filter(event == "ball_snap") %>% 
  mutate(Y_PreSnap_Rank_By_OL_Label = rank(-y, ties.method = "first"),
         Y_PreSnap_Rank_ClosestOL_ToBall = rank(abs(Y_dist_FromBallFrame1), ties.method = "first"),
         DistFromBall_PreSnap_Rank_By_OL = rank(TotDistFromBall, ties.method = "first")) %>%
  ungroup() %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, position, 
         OL_Label, Y_PreSnap_Rank_By_OL_Label, Y_PreSnap_Rank_ClosestOL_ToBall,
         DistFromBall_PreSnap_Rank_By_OL)

# Note that ranking by "tot dist from ball" actually doesn't always get centers
# View(DesignedRuns_By_OL_Label %>% filter(OL_Label == "OL", DistFromBall_PreSnap_Rank_By_OL == 1))
# I.e. most accurate way is to use strictly the "Y dist from ball"

DesignedRuns_Merged <- merge(x = DesignedRuns_Merged, y = DesignedRuns_By_OL_Label, 
                             by = c("gameId", "playId", "nflId", "displayName", "position", "OL_Label", "PlayerSideOfBall"),
                             all.x = TRUE)
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% select(1:4, 8:185, "position", "OL_Label", "PlayerSideOfBall")
rm(DesignedRuns_By_OL_Label)

# From there, use center to retroactively define other OL spots
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
       ifelse(OL_Label == "OL" & Y_PreSnap_Rank_ClosestOL_ToBall == 1, "C", NA))

# Now, we want it where "if Y rank is one ahead of center's Y rank, then LG"
# "If Y rank is two ahead of center's Y rank, then LT", etc.
# Probably will have to group_by() playId to do so
DesignedRuns_Center_PreSnap <- DesignedRuns_Merged %>%
  group_by(gameId, playId, OL_Label) %>%
  filter(event == "ball_snap") %>% 
  mutate(Y_PreSnap_Rank_By_OL_Label = rank(-y, ties.method = "first")) %>%
  ungroup() %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, 
         C_PreSnap_YRank_AmongOL = Y_PreSnap_Rank_By_OL_Label, AlignedPos) %>%
  filter(AlignedPos == "C")

# Now get rid of the unnecessary before we merge
DesignedRuns_Center_PreSnap <- DesignedRuns_Center_PreSnap %>%
  select(-c("nflId", "displayName", "PlayerSideOfBall", "AlignedPos"))

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  merge(DesignedRuns_Center_PreSnap, by = c("gameId", "playId"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
rm(DesignedRuns_Center_PreSnap)

# Now, we can compare each player's pre-snap Y rank to the center's Y rank, to define positions
# I.e., it's not as simple as "center always has Y rank of 3", b/c some plays have 6+ OL
# View(DesignedRuns_Merged %>% filter(event == "ball_snap", playId == 3379, PlayerSideOfBall == "offense"))
# This is example of unbalanced formation - Drew Dalman is C, three OL are to his left
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
    ifelse(OL_Label == "OL" & (Y_PreSnap_Rank_By_OL_Label - C_PreSnap_YRank_AmongOL == (-1)), "LG", AlignedPos))
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
    ifelse(OL_Label == "OL" & (Y_PreSnap_Rank_By_OL_Label - C_PreSnap_YRank_AmongOL == (-2)), "LT", AlignedPos))
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
    ifelse(OL_Label == "OL" & (Y_PreSnap_Rank_By_OL_Label - C_PreSnap_YRank_AmongOL == 1), "RG", AlignedPos))
DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
    ifelse(OL_Label == "OL" & (Y_PreSnap_Rank_By_OL_Label - C_PreSnap_YRank_AmongOL == 2), "RT", AlignedPos))
table(DesignedRuns_Merged$AlignedPos)

# create a distance from LT column
LT_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "LT") %>%
  select(gameId, playId, nflId_LT = nflId, x, y, frameId) %>%
  rename(xLT = x,
         yLT = y)

# create a distance from LG column
LG_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "LG") %>%
  select(gameId, playId, nflId_LG = nflId, x, y, frameId) %>%
  rename(xLG = x,
         yLG = y)

# create a distance from RT column
RT_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "RT") %>%
  select(gameId, playId, nflId_RT = nflId, x, y, frameId) %>%
  rename(xRT = x,
         yRT = y)

# create a distance from RG column
RG_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "RG") %>%
  select(gameId, playId, nflId_RG = nflId, x, y, frameId) %>%
  rename(xRG = x,
         yRG = y)

# create a distance from Center column
C_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "C") %>%
  select(gameId, playId, nflId_C = nflId, x, y, frameId) %>%
  rename(xCenter = x,
         yCenter = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(LT_coordinates, by = c("playId", "gameId", "frameId")) %>%
  left_join(RT_coordinates, by = c("playId", "gameId", "frameId")) %>%
  left_join(RG_coordinates, by = c("playId", "gameId", "frameId")) %>%
  left_join(LG_coordinates, by = c("playId", "gameId", "frameId")) %>%
  left_join(C_coordinates, by = c("playId", "gameId", "frameId"))

# clean up environment
rm(C_coordinates, LT_coordinates, LG_coordinates, RT_coordinates, RG_coordinates)

# Define remaining LG/LT/RG/RT below, incorporating is.na() when needed
# E.G. LG would have is.na for AlignedPos, and y barely higher than C's y, etc.
DesignedRuns_LG_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", position != "QB", is.na(AlignedPos),
         event == "ball_snap", y > yCenter, y <= 1.5 + yCenter, x >= xCenter - 1) %>%
  mutate(Is_LG = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, Is_LG)

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_LG_Identify_Snap, 
                                                         by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_LG = ifelse(!is.na(Is_LG), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
            ifelse(Is_LG == TRUE, "LG", AlignedPos))

# Update the distance from LG column
LG_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "LG") %>%
  select(gameId, playId, nflId_LG = nflId, x, y, frameId) %>%
  rename(xLG = x,
         yLG = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(LG_coordinates, by = c("playId", "gameId", "frameId")) 
rm(LG_coordinates, DesignedRuns_LG_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Use group_by to see if any play has multiple players listed at same position
LGNumbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "LG", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(LGNumbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# And get rid of the new "extra" columns
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  select(-c("nflId_LG.x", "xLG.x", "yLG.x"))
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  rename(nflId_LG = `nflId_LG.y`, xLG = `xLG.y`, yLG = `yLG.y`)

# Repeat the process for LT
DesignedRuns_LT_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", position != "QB", is.na(AlignedPos),
         event == "ball_snap", y > yLG, y <= 1.5 + yLG, x >= xCenter - 1) %>%
  mutate(Is_LT = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, Is_LT)

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_LT_Identify_Snap, 
                                                         by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_LT = ifelse(!is.na(Is_LT), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
     ifelse(Is_LT == TRUE, "LT", AlignedPos))

# Update the distance from LT column
LT_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "LT") %>%
  select(gameId, playId, nflId_LT = nflId, x, y, frameId) %>%
  rename(xLT = x,
         yLT = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(LT_coordinates, by = c("playId", "gameId", "frameId")) 
rm(LT_coordinates, DesignedRuns_LT_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Use group_by to see if any play has multiple players listed at same position
LTNumbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "LT", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(LTNumbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# And get rid of the new "extra" columns
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  select(-c("nflId_LT.x", "xLT.x", "yLT.x"))
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  rename(nflId_LT = `nflId_LT.y`, xLT = `xLT.y`, yLT = `yLT.y`)

# Repeat the process for RG
DesignedRuns_RG_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", position != "QB", is.na(AlignedPos),
         event == "ball_snap", y < yCenter, y >= yCenter - 1.5, x >= xCenter - 1) %>%
  mutate(Is_RG = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, Is_RG)

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_RG_Identify_Snap, 
                                                         by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_RG = ifelse(!is.na(Is_RG), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
         ifelse(Is_RG == TRUE, "RG", AlignedPos))

# Update the distance from RG column
RG_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "RG") %>%
  select(gameId, playId, nflId_RG = nflId, x, y, frameId) %>%
  rename(xRG = x,
         yRG = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(RG_coordinates, by = c("playId", "gameId", "frameId")) 
rm(RG_coordinates, DesignedRuns_RG_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Use group_by to see if any play has multiple players listed at same position
RGNumbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "RG", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(RGNumbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# And get rid of the new "extra" columns
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  select(-c("nflId_RG.x", "xRG.x", "yRG.x"))
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  rename(nflId_RG = `nflId_RG.y`, xRG = `xRG.y`, yRG = `yRG.y`)

# Repeat the process for RT
DesignedRuns_RT_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", position != "QB", is.na(AlignedPos),
         event == "ball_snap", y < yRG, y >= yRG - 1.5, x >= xCenter - 1) %>%
  mutate(Is_RT = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, Is_RT)

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_RT_Identify_Snap, 
                                                         by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_RT = ifelse(!is.na(Is_RT), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
        ifelse(Is_RT == TRUE, "RT", AlignedPos))

# Update the distance from RT column
RT_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "RT") %>%
  select(gameId, playId, nflId_RT = nflId, x, y, frameId) %>%
  rename(xRT = x,
         yRT = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(RT_coordinates, by = c("playId", "gameId", "frameId")) 
rm(RT_coordinates, DesignedRuns_RT_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Use group_by to see if any play has multiple players listed at same position
RTNumbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "RT", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(RTNumbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# And get rid of the new "extra" columns
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  select(-c("nflId_RT.x", "xRT.x", "yRT.x"))
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  rename(nflId_RT = `nflId_RT.y`, xRT = `xRT.y`, yRT = `yRT.y`)

# Now define TEs using Y and X coordinates
DesignedRuns_TEL1_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
  event == "ball_snap", y > yLT, y <= 2 + yLT, x >= xLT - 1.25) %>%
  mutate(Is_TEL1 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TEL1)

# Use group_by to see if any play has multiple players listed at same position
TEL1Numbers_ByPlay <- DesignedRuns_TEL1_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TEL1 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))
# There are a few plays with multiple TEL1 by this definition (likely QB sneaks)
# An example: View(DesignedRuns_Merged %>% filter(event == "ball_snap", PlayerSideOfBall == "offense", playId == 361))

DesignedRuns_TEL1_Identify_Snap <- DesignedRuns_TEL1_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TEL1 == TRUE) %>%
  mutate(Y_Rank_Among_TEL1 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TEL1
DesignedRuns_TEL1_Identify_Snap <- DesignedRuns_TEL1_Identify_Snap %>% 
  mutate(Is_TEL1 = ifelse(Y_Rank_Among_TEL1 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TEL1
DesignedRuns_TEL1_Identify_Snap <- DesignedRuns_TEL1_Identify_Snap %>% 
  filter(Is_TEL1 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TEL1_Identify_Snap <- DesignedRuns_TEL1_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TEL1"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TEL1_Identify_Snap, 
          by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TEL1 = ifelse(!is.na(Is_TEL1), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
          ifelse(Is_TEL1 == TRUE, "TEL1", AlignedPos))

# create a distance from TEL1 column
TEL1_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TEL1") %>%
  select(gameId, playId, nflId_TEL1 = nflId, x, y, frameId) %>%
  rename(xTEL1 = x,
         yTEL1 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TEL1_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TEL1_coordinates, DesignedRuns_TEL1_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TEL1Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TEL1", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TEL1Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now define TEL2
DesignedRuns_TEL2_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
         event == "ball_snap", y > yTEL1, y <= 2 + yTEL1, x >= xLT - 1.25) %>%
  mutate(Is_TEL2 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TEL2)

# Use group_by to see if any play has multiple players listed at same position
TEL2Numbers_ByPlay <- DesignedRuns_TEL2_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TEL2 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))

DesignedRuns_TEL2_Identify_Snap <- DesignedRuns_TEL2_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TEL2 == TRUE) %>%
  mutate(Y_Rank_Among_TEL2 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TEL2
DesignedRuns_TEL2_Identify_Snap <- DesignedRuns_TEL2_Identify_Snap %>% 
  mutate(Is_TEL2 = ifelse(Y_Rank_Among_TEL2 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TEL2
DesignedRuns_TEL2_Identify_Snap <- DesignedRuns_TEL2_Identify_Snap %>% 
  filter(Is_TEL2 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TEL2_Identify_Snap <- DesignedRuns_TEL2_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TEL2"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TEL2_Identify_Snap, 
                    by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TEL2 = ifelse(!is.na(Is_TEL2), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
                                     ifelse(Is_TEL2 == TRUE, "TEL2", AlignedPos))

# create a distance from TEL2 column
TEL2_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TEL2") %>%
  select(gameId, playId, nflId_TEL2 = nflId, x, y, frameId) %>%
  rename(xTEL2 = x,
         yTEL2 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TEL2_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TEL2_coordinates, DesignedRuns_TEL2_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TEL2Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TEL2", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TEL2Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now define TEL3
DesignedRuns_TEL3_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
         event == "ball_snap", y > yTEL2, y <= 2 + yTEL2, x >= xLT - 1.25) %>%
  mutate(Is_TEL3 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TEL3)

# Use group_by to see if any play has multiple players listed at same position
TEL3Numbers_ByPlay <- DesignedRuns_TEL3_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TEL3 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))

DesignedRuns_TEL3_Identify_Snap <- DesignedRuns_TEL3_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TEL3 == TRUE) %>%
  mutate(Y_Rank_Among_TEL3 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TEL3
DesignedRuns_TEL3_Identify_Snap <- DesignedRuns_TEL3_Identify_Snap %>% 
  mutate(Is_TEL3 = ifelse(Y_Rank_Among_TEL3 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TEL3
DesignedRuns_TEL3_Identify_Snap <- DesignedRuns_TEL3_Identify_Snap %>% 
  filter(Is_TEL3 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TEL3_Identify_Snap <- DesignedRuns_TEL3_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TEL3"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TEL3_Identify_Snap, 
                by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TEL3 = ifelse(!is.na(Is_TEL3), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos = 
                                      ifelse(Is_TEL3 == TRUE, "TEL3", AlignedPos))

# create a distance from TEL3 column
TEL3_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TEL3") %>%
  select(gameId, playId, nflId_TEL3 = nflId, x, y, frameId) %>%
  rename(xTEL3 = x,
         yTEL3 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TEL3_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TEL3_coordinates, DesignedRuns_TEL3_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TEL3Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TEL3", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TEL3Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now define TER1
DesignedRuns_TER1_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
         event == "ball_snap", y < yRT, y >= yRT - 2, x >= xRT - 1.25) %>%
  mutate(Is_TER1 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TER1)

# Use group_by to see if any play has multiple players listed at same position
TER1Numbers_ByPlay <- DesignedRuns_TER1_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TER1 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))

DesignedRuns_TER1_Identify_Snap <- DesignedRuns_TER1_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TER1 == TRUE) %>%
  mutate(Y_Rank_Among_TER1 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TER1
DesignedRuns_TER1_Identify_Snap <- DesignedRuns_TER1_Identify_Snap %>% 
  mutate(Is_TER1 = ifelse(Y_Rank_Among_TER1 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TER1
DesignedRuns_TER1_Identify_Snap <- DesignedRuns_TER1_Identify_Snap %>% 
  filter(Is_TER1 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TER1_Identify_Snap <- DesignedRuns_TER1_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TER1"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TER1_Identify_Snap, 
               by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TER1 = ifelse(!is.na(Is_TER1), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
                                       ifelse(Is_TER1 == TRUE, "TER1", AlignedPos))

# create a distance from TER1 column
TER1_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TER1") %>%
  select(gameId, playId, nflId_TER1 = nflId, x, y, frameId) %>%
  rename(xTER1 = x,
         yTER1 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TER1_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TER1_coordinates, DesignedRuns_TER1_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TER1Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TER1", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TER1Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now define TER2
DesignedRuns_TER2_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
         event == "ball_snap", y < yTER1, y >= yTER1 - 2, x >= xRT - 1.25) %>%
  mutate(Is_TER2 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TER2)

# Use group_by to see if any play has multiple players listed at same position
TER2Numbers_ByPlay <- DesignedRuns_TER2_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TER2 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))

DesignedRuns_TER2_Identify_Snap <- DesignedRuns_TER2_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TER2 == TRUE) %>%
  mutate(Y_Rank_Among_TER2 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TER2
DesignedRuns_TER2_Identify_Snap <- DesignedRuns_TER2_Identify_Snap %>% 
  mutate(Is_TER2 = ifelse(Y_Rank_Among_TER2 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TER2
DesignedRuns_TER2_Identify_Snap <- DesignedRuns_TER2_Identify_Snap %>% 
  filter(Is_TER2 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TER2_Identify_Snap <- DesignedRuns_TER2_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TER2"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TER2_Identify_Snap, 
         by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TER2 = ifelse(!is.na(Is_TER2), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
                                      ifelse(Is_TER2 == TRUE, "TER2", AlignedPos))

# create a distance from TER2 column
TER2_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TER2") %>%
  select(gameId, playId, nflId_TER2 = nflId, x, y, frameId) %>%
  rename(xTER2 = x,
         yTER2 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TER2_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TER2_coordinates, DesignedRuns_TER2_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TER2Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TER2", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TER2Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now define TER3
DesignedRuns_TER3_Identify_Snap <- DesignedRuns_Merged %>%
  filter(PlayerSideOfBall == "offense", is.na(AlignedPos),
         event == "ball_snap", y < yTER2, y >= yTER2 - 2, x >= xRT - 1.25) %>%
  mutate(Is_TER3 = TRUE) %>%
  select(gameId, playId, nflId, displayName, PlayerSideOfBall, y, Is_TER3)

# Use group_by to see if any play has multiple players listed at same position
TER3Numbers_ByPlay <- DesignedRuns_TER3_Identify_Snap %>% group_by(gameId, playId) %>% 
  filter(Is_TER3 == TRUE) %>% summarize(n = n()) %>% arrange(desc(n))

DesignedRuns_TER3_Identify_Snap <- DesignedRuns_TER3_Identify_Snap %>% 
  group_by(gameId, playId) %>% 
  filter(Is_TER3 == TRUE) %>%
  mutate(Y_Rank_Among_TER3 = rank(y, ties.method = "first")) %>% 
  ungroup()

# Now, for the few "double" cases, make the player with the higher y not be TER3
DesignedRuns_TER3_Identify_Snap <- DesignedRuns_TER3_Identify_Snap %>% 
  mutate(Is_TER3 = ifelse(Y_Rank_Among_TER3 == 1, TRUE, FALSE))
# Then get rid of the players that are no longer considered TER3
DesignedRuns_TER3_Identify_Snap <- DesignedRuns_TER3_Identify_Snap %>% 
  filter(Is_TER3 == TRUE)
# And now get rid of unnecessary columns before the left_join
DesignedRuns_TER3_Identify_Snap <- DesignedRuns_TER3_Identify_Snap %>%
  select(-c("y", "Y_Rank_Among_TER3"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% left_join(DesignedRuns_TER3_Identify_Snap, 
            by = c("gameId", "playId", "nflId", "displayName", "PlayerSideOfBall"))
DesignedRuns_Merged <- DesignedRuns_Merged %>% arrange(gameId, playId)
DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(Is_TER3 = ifelse(!is.na(Is_TER3), TRUE, FALSE))

DesignedRuns_Merged <- DesignedRuns_Merged %>% mutate(AlignedPos =
                             ifelse(Is_TER3 == TRUE, "TER3", AlignedPos))

# create a distance from TER3 column
TER3_coordinates <- DesignedRuns_Merged %>%
  filter(AlignedPos == "TER3") %>%
  select(gameId, playId, nflId_TER3 = nflId, x, y, frameId) %>%
  rename(xTER3 = x,
         yTER3 = y)

DesignedRuns_Merged <- DesignedRuns_Merged %>%
  left_join(TER3_coordinates, by = c("playId", "gameId", "frameId")) 
rm(TER3_coordinates, DesignedRuns_TER3_Identify_Snap)

# Use unique() to get rid of any duplicates
DesignedRuns_Merged <- unique(DesignedRuns_Merged)

# Run a final check to see if any play has multiple players listed at same position
TER3Numbers_ByPlay <- DesignedRuns_Merged %>% group_by(gameId, playId) %>% 
  filter(AlignedPos == "TER3", event == "ball_snap") %>% summarize(n = n()) %>% arrange(desc(n))
rm(TER3Numbers_ByPlay)
table(DesignedRuns_Merged$AlignedPos)

# Now classify how many total TEs there are on each play
left_tes <- DesignedRuns_Merged %>% 
  filter(event == "ball_snap",
         AlignedPos %in% c("TEL1", "TEL2", "TEL3")) %>% 
  group_by(gameId, playId) %>% 
  summarize(num_left_tes = n())

right_tes <- DesignedRuns_Merged %>% 
  filter(event == "ball_snap",
         AlignedPos %in% c("TER1", "TER2", "TER3")) %>% 
  group_by(gameId, playId) %>% 
  summarize(num_right_tes = n())

DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  left_join(left_tes, by = c("gameId","playId")) %>% 
  left_join(right_tes, by = c("gameId","playId"))

DesignedRuns_Merged <- DesignedRuns_Merged %>% 
  mutate(num_left_tes = ifelse(is.na(num_left_tes), 0, num_left_tes),
         num_right_tes = ifelse(is.na(num_right_tes), 0, num_right_tes))
rm(left_tes, right_tes)
DesignedRuns_Merged <- DesignedRuns_Merged %>%
  mutate(num_total_tes = num_left_tes + num_right_tes)
